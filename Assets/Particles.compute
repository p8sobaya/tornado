#pragma kernel CSMain  // カーネル関数を指定

#define NUM_THREAD_X 256 // スレッド数 X成分
#define NUM_THREAD_Y 1 // スレッド数 Y成分
#define NUM_THREAD_Z 1 // スレッド数 Z成分

#define PI 3.14159265

// パーティクルデータの構造体
struct ParticleData
{
    float3 velocity; // 速度
    float3 position; // 位置
};

// 定数バッファ
cbuffer CB
{
    float3 _Gravity;   // 重力
    float3 _AreaSize;  // パーティクルが存在するエリアの大きさ
    float  _TimeStep;  // タイムステップ
    float _Time;
    float Intensity;   // 激しさ
}
// 読み込み書き込みが可能なパーティクルデータを格納するバッファ
RWStructuredBuffer<ParticleData> _ParticleBuffer;
RWStructuredBuffer<float2> _CentersBuffer;

// 乱数(0.0~1.0)を返す関数
float rand(float2  co)
{
   return frac(sin(dot(co.xy, float2(12.9898,78.233))) * 43758.5453);
}

// 半径1の球体の内部のランダムな点
float3 randomInsideUnitSphere (float co)
{  
    float phi = 2 * PI * rand(co);
    float th  = acos(1.0 - 2.0 * rand(co + float2(0.0, 0.1)));
    float r   = pow(rand(co + float2(0.0, 0.2)), 0.333333333);
 
    float x = r * sin(th) * cos(phi);
    float y = r * sin(th) * sin(phi);
    float z = r * cos(th);
 
    return float3 (x, y, z);
}

// ------------------------------------------------------------------
// カーネル関数
// ------------------------------------------------------------------
// スレッド数を設定
[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void CSMain ( uint3 Gid  : SV_GroupID,
             uint3 GTid : SV_GroupThreadID,
             uint3 DTid : SV_DispatchThreadID,
             uint  GI   : SV_GroupIndex )
{
    // パーティクルのインデックス
    int idx = DTid.x;
    // パーティクルの速度を読み込み
    float3 velocity = _ParticleBuffer[idx].velocity;
    // パーティクルの位置を読み込み
    float3 position = _ParticleBuffer[idx].position;

    // 基本重力
    float3 acceleration = _Gravity.xyz;

    // 便宜
    float3 zeros={0,0,0};
    float3 ar = _AreaSize.xyz;
    float intensity;

    //中心位置読み込み
    float2 center0 = _CentersBuffer[idx];
    float2 below = float2(0,0);
    if( idx>=2 && idx<=20 ){
    	below = _CentersBuffer[idx-1];
    }

    // 中心位置を更新
    if(idx>=2 && idx<=20){

    	center0 += (-0.5+rand(position.zy+1))*_TimeStep*(80+0*sin(0.1*_Time));

    	if(distance(center0,below) > ar.y / ( 20 * 1.3 )){
    		center0 = below + normalize(center0-below) * ar.y / ( 20 * 1.3 );
    	}

    }

    //竜巻の軸座標x,zを計算
    float x1 = frac( (position.y + ar.y*0.5)/( ar.y/20 ));
    int x2 = round( (position.y + ar.y*0.5)/( ar.y/20 ) - x1 )+0.0001;
    float2 x3 = _CentersBuffer[x2];
    float2 x4 = _CentersBuffer[x2+1];
    float2 x5 = x3*(1-x1) + x4*x1;
    float3 center = {x5.x, 0, x5.y};


    //向心方向を取得


	//場所によってベクトル場を場合分け

    float3 force=0;
    float fric=0;
    float2 vr = position.xz - center.xz;
    float zr = length(vr);
    float cr = 1.0;

    if(position.y > -0.35*ar.y){
    	cr = 1 -1.2 * pow((position.y+ar.y*0.35)/ar.y , 0.8);
    }

    if(position.y < ar.y*(-0.35)){ //area_A
    	if(zr>7.0){
    		//外側
    		force = float3( -40.0 * vr.xy / max(0.2,pow(zr,1.2)) , 0.5 ); //r,y成分
    		force.yz = force.zy; 
    		force.xz += float2( - vr.y , vr.x ) * 0.7 * min(100,rsqrt(zr));  //Θ成分
    		if(Intensity>15)force.y += (Intensity-15)*0.1;
    		acceleration += force;

    	}else{
    		//内側
    		force = float3( -30.0 * vr.xy / max(0.2,pow(zr,1.6)) , 20.0 ); //r,y成分
    		force.yz = force.zy;
    		if(Intensity>15)force.y += (Intensity-15)*0.35;
    		acceleration += force;
    	}
    }else if(position.y < ar.y*0.15){ //area_B
   		if(zr*cr*cr<1.5){
    		force = float3( 70.0 * cr * vr.xy / max(0.02,pow(zr*cr,2.0)) , 1.8 + 1.8*position.y/ar.y); //r,y成分
    		force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 1.0 * min(100,rsqrt(zr*cr))*cr*cr;
    		if(Intensity>15)force.y += (Intensity-15)*0.3;
    		acceleration += force;
    	}else if(zr*cr*cr<6.0){
    	    force = float3( -120 * cr * vr.xy / pow(zr*cr,1.7) , 1.1 - position.y/ar.y ); //r,y成分
   			force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 1.0 * min(100,rsqrt(zr*cr))/cr;
    		if(Intensity>15)force.y += (Intensity-15)*0.1;
    		acceleration += force;
    	}else{
    		force = float3( -120 * cr*vr.xy / pow(zr*cr,1.4) , -1-((position.y+ar.y*0.35)/ar.y)*15 ); //r,y成分
   			force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 1.0 * min(100,rsqrt(zr*cr));
    		acceleration += force;
    	}

    }else if(position.y < ar.y*0.25){ //area_C

    	if(zr<18){
    	    force = float3( 10 * cr*vr.xy / max(0.02,pow(zr,1.3)) , 15 ); //r,y成分
   			force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 6.0 * min(100,rsqrt(zr)) ;
    		force += float3(0,3,0);
    		acceleration += force;
    	}else if(zr<28){
    	    force = float3( -15 * cr*vr.xy / pow(zr,1.3) , 3 ); //r,y成分
   			force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 5.0 * min(100,rsqrt(zr)) ;
    		force += float3(0,-1,0);
    		acceleration += force;
    	}else{
    		force = float3( -15 * cr*vr.xy / pow(zr,1.3) , -3 ); //r,y成分
   			force.yz = force.zy;
    		force.xz += float2( - vr.y , vr.x ) * 1.0 * min(100,rsqrt(zr)) ;
    		force += float3(0,-8,0);
    		acceleration += force;
    	}

    }else{ //area_D
    	if(zr<18){
    		force=0;
        	force.xz += float2( - vr.y , vr.x ) * 4.0 * min(100,rsqrt(zr));
    		force += float3(0,1,0);
    		acceleration += force;
    	}else{
        	force.xz += float2( - vr.y , vr.x ) * 4.0 * min(100,rsqrt(zr));
    		force += float3(0,-10,0);
    		acceleration += force;
    	}
    }







    /*
    force = float3( -100 * position.xz / pow(zr,1.1) , 0 ); //r,y成分
    force.yz = force.zy;
    force.xz += float2( - position.z , position.x ) * 50*min(1000,rsqrt(zr));
    acceleration += force;



    //r成分
    if(zr<1.5){
    	force = float3(position.xz*0.1/max(0.02,(zr*zr)),0.0);
    	force.yz = force.zy;
    	acceleration += force*700;
    }else{
    	force = float3(position.xz*(-1.0)*2/(zr*zr*(2+sqrt(position.y+(_AreaSize.y*0.5)))),0.0);
    	force.yz = force.zy;
    	acceleration += force*1000;
    }

    //z成分
    if(zr>4.0){
        acceleration += float3(0,-3*sqrt(sqrt(position.y+(_AreaSize.y*0.4))),0);
    }else if(position.y < _AreaSize.y * 0.3 && zr < 4.0){
    	acceleration += float3(0,2,0);
    }else if(zr<1.3){
    	acceleration += float3(0,-1,0);
    }else{
    	acceleration += float3(0,1,0);
    }
    */

    //空気抵抗１
    if(distance(velocity,zeros)>80){
    	velocity *= 80/distance(velocity,zeros);
   	}

   	//空気抵抗２
   	if(distance(velocity,zeros)>5){
   		velocity -= velocity*0.015;
   	}
   	/*
   	//空気抵抗y
   	velocity.y -= velocity.y * 0.1 / ( 1.0 + (position.y+(_AreaSize.y*0.5))*0.1  );
   	*/

   	/*
   	//★中心軌道の確認
   	if(position.y > -ar.y*0.4){
    	position.xz=center.xz*1;
   		velocity.y=-0.5+rand(position.zx);
    }
    */

    // 速度を計算
    velocity += acceleration * _TimeStep;
    // 位置を計算
    position += velocity     * _TimeStep;



    // パーティクルがエリアの外にあるかどうか

    if(position.x < -_AreaSize.x * 0.5 || position.x > _AreaSize.x * 0.5 ||
      position.y < -_AreaSize.y * 0.5 || position.y > _AreaSize.y * 0.5 ||
      position.z < -_AreaSize.z * 0.5 || position.z > _AreaSize.z * 1.0 || zr<0.02)
    {
        // 速度と位置を初期化
        //float3 rnd = randomInsideUnitSphere(float2(idx, 0));
        float3 rnd = float3(rand(float2(idx, 0.0)), rand(float2(idx, 1.0)), rand(float2(idx, 2.0)));
        velocity = rnd*2;
        randomInsideUnitSphere(float2(idx, 0));
        position = rnd*15;
    }

    //地面より下にあった場合
    if(position.y < -_AreaSize.y * 0.397){
    	position.y = -_AreaSize.y * 0.397;
    	velocity.y = 2.5*abs(randomInsideUnitSphere(float2(idx, 0)));
    }

    // 速度と位置をバッファに書き込み
    _ParticleBuffer[idx].velocity = velocity;
    _ParticleBuffer[idx].position = position;
    if(idx>=2 && idx<=20){
	    _CentersBuffer[idx] = center0;
	}

}

